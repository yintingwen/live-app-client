<script setup>
import { getVideoList } from '@/apis/movie'
import { useTabbarTheme } from '@hooks/tabbar'
import { onLoad } from '@dcloudio/uni-app'
import { computed, ref } from 'vue'

const videoList = ref([])
const videoPlayIndex = ref(0)
const videoRef = ref()
let videoAppearDirection = ''
let videoAppearIndex = 0

onLoad(async () => {
  videoList.value = await getVideoList()
  console.log(videoList.value)
})
useTabbarTheme('dark')
const videoLayout = computed(() => ({
  height: uni.getSystemInfoSync().windowHeight + 'px',
  width: '750rpx',
}))

function onVideoAppear(e, item, index) {
  videoAppearIndex = index
  videoAppearDirection = e.direction
}

function onVideoDisappear(e, item, index) {
  if (videoAppearDirection !== e.direction || videoAppearIndex === videoPlayIndex.value) return
  const oldVideo = uni.createVideoContext(`video-${index}`)
  oldVideo.seek(0)
  oldVideo.pause()
  videoPlayIndex.value = videoAppearIndex
  uni.createVideoContext(`video-${videoAppearIndex}`).play()
}
</script>

<template>
  <list :style="videoLayout" :pagingEnabled="true">
    <cell
      v-for="(item, index) in videoList"
      :key="item.id"
      class="list-item"
      :style="videoLayout"
      @appear="onVideoAppear($event, item, index)"
      @disappear="onVideoDisappear($event, item, index)"
    >
      <video
        :id="`video-${index}`"
        v-if="
          index === videoPlayIndex || index === videoPlayIndex - 1 || index === videoPlayIndex + 1
        "
        :show-loading="false"
        ref="videoRef"
        :src="item.url"
        :style="videoLayout"
        :loop="true"
        :controls="false"
        :autoplay="index === videoPlayIndex"
      />
      <!-- <image
        v-if="index !== videoPlayIndex"
        :src="item.src + '?x-oss-process=video/snapshot,t_100,f_jpg'"
        :mode="mode"
        :style="
          'width: 750rpx;' +
          'height: ' +
          videoLayout.height +
          'px; position: absolute;'
        "
      ></image> -->
    </cell>
  </list>
</template>

<style lang="scss" scoped>
.list-item {
  background-color: #000;
  position: relative;
}
</style>
