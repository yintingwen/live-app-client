<script setup>
import { getVideoList } from '@/apis/movie'
import { useTabbarTheme } from '@hooks/tabbar'
import { onLoad, onShow, onHide } from '@dcloudio/uni-app'
import { computed, ref, getCurrentInstance } from 'vue'

let videoPlaying = true
let videoAppearIndex = 0
const videoList = ref([])
const videoPlayIndex = ref(0)

useTabbarTheme('dark')

onLoad(async () => {
  videoList.value = await getVideoList()
  console.log(videoList.value)
})

onShow(() => {
  if (videoPlaying) return
  uni.createVideoContext(`video-${videoPlayIndex.value}`, getCurrentInstance()).play()
  videoPlaying = true
})

onHide(() => {
  uni.createVideoContext(`video-${videoPlayIndex.value}`, getCurrentInstance()).pause()
  videoPlaying = false
})

const videoLayout = computed(() => ({
  height: uni.getSystemInfoSync().windowHeight + 'px',
  width: '750rpx',
}))

function onVideoAppear(e, item, index) {
  videoAppearIndex = index
  videoAppearDirection = e.direction
}

function onVideoDisappear(e, item, index) {
  if (videoAppearDirection !== e.direction || videoAppearIndex === videoPlayIndex.value) return
  const oldVideo = uni.createVideoContext(`video-${index}`, getCurrentInstance())
  oldVideo.pause()
  oldVideo.seek(0)
  videoPlayIndex.value = videoAppearIndex
  videoPlaying = true
  uni.createVideoContext(`video-${videoAppearIndex}`, getCurrentInstance()).play()
}


function onTapVideo (index) {
  const video = uni.createVideoContext(`video-${index}`, getCurrentInstance())
  if (videoPlaying) {
    video.pause()
  } else {
    video.play()
  }
  videoPlaying = !videoPlaying
}

function getLikeNumber(num) {
  if (num < 1000) return num
  if (num < 10000) return `${(num / 1000).toFixed(1)}k`
  return `${(num / 10000).toFixed(1)}w`
}
</script>

<template>
  <view :style="videoLayout" class="movie-page">
    <list :style="videoLayout" :pagingEnabled="true">
      <cell
        v-for="(item, index) in videoList"
        :key="item.id"
        class="list-item"
        :style="videoLayout"
        @appear="onVideoAppear($event, item, index)"
        @disappear="onVideoDisappear($event, item, index)"
      >
        <video
          :id="`video-${index}`"
          :src="item.url"
          :style="videoLayout"
          :loop="true"
          :controls="false"
          :autoplay="index === videoPlayIndex"
          :show-center-play-btn="false"
        />
        <view class="video-controls" :style="videoLayout" @tap="onTapVideo(index)">
          <view class="video-info">
            <view class="video-title">
              <text class="video-title-text">{{ item.title }}</text>
            </view>
            <!-- <view class="video-desc"></view> -->
          </view>
          <view class="video-utils">
            <view class="video-utils-item video-author">
              <image class="video-author-image" :src="item.userInfo.avatar"></image>
            </view>
            <view class="video-utils-item">
              <co-icon class="video-utils-icon" name="video_like" :size="48" />
              <text class="controls-text">
                {{ getLikeNumber(item.greatCount) }}
              </text>
            </view>
            <view class="video-utils-item">
              <co-icon class="video-utils-icon" name="video_comment" :size="48" />
              <text class="controls-text">4096</text>
            </view>
            <view class="video-utils-item">
              <co-icon class="video-utils-icon" name="video_share" :size="48" />
              <text class="controls-text">999</text>
            </view>
          </view>
        </view>
      </cell>
    </list>
  </view>
</template>

<style lang="scss" scoped>
.movie-page {
  background-color: #000;

  .list-item {
    position: relative;
  }

  .video-controls {
    position: absolute;
    top: 0;
    right: 0;

    .controls-text {
      color: #fff;
      text-align: center;
    }

    .video-info {
      position: absolute;
      bottom: 30rpx;
      left: 30rpx;
      width: 536rpx;

      .video-title-text {
        line-height: 48rpx;
        color: #fff;
        font-size: 32rpx;
        font-weight: 500;
      }
    }
  }

  .video-utils {
    position: absolute;
    right: 12rpx;
    bottom: 200rpx;
    align-items: center;

    .video-utils-icon {
      margin-bottom: 12rpx;
    }


    .video-utils-item {
      margin-top: 52rpx;
      align-items: center;
      justify-content: center;
    }

    .video-author {
      .video-author-image {
        height: 72rpx;
        width: 72rpx;
        border-radius: 50%;
        border: 2rpx solid rgba(255, 255, 255, 1);
      }
    }
  }
}
</style>
