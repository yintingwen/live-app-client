<template>
  <swiper
    class="live-room"
    :vertical="true"
    :style="liveRoomLayout"
    :current="liveOpenIndex"
    :skip-hidden-item-layout="true"
    @change="onSwiperChange"
  >
    <swiper-item
      v-for="(item, index) in liveStore.liveSlideList"
      class="live-room-container"
      :key="item.id"
      :style="liveRoomLayout"
      @tap="onChatInputBlur"
    >
      <video
        v-if="liveOpenIndex === index"
        :id="`video-${item.id}`"
        :src="`http://121.62.18.249:8080/play/d87d13a23f71478cb5030170daae72d7.flv`"
        :controls="false"
        :style="liveRoomLayout"
        :autoplay="true"
        :is-live="true"
        :enable-progress-gesture="false"
        object-fit="cover"
        @tap="() => {}"
        @play="onVideoPlay($event, index)"
      ></video>
      <view class=""> </view>
      <LiveRoomCover v-if=" liveOpenIndex !== index || liveVideoLoading" />
      <LiveRoomHeader
        v-if="liveRoomInfo && liveOpenIndex === index && !liveChatInputShow && !liveVideoLoading"
        :anchorInfo="liveRoomUserInfo"
        :userCount="liveRoomUserCount"
        @tapAnchor="() => (anchorInfoShow = true)"
        @tapFollow="onTapFollow"
      />
      <LiveRoomFooter
        v-if="!giftListShow && liveOpenIndex === index && !liveChatInputShow && !liveVideoLoading"
        class="bottom-fixed"
        @tapInput="onTapChat"
        @tapGift="() => (giftListShow = true)"
      />
      <LiveRoomCharRoom v-if="!giftListShow && liveOpenIndex === index && !liveVideoLoading" :list="chatRoomList" />
    </swiper-item>
  </swiper>
  <live-room-chat-input
    v-model:text="liveChatInputText"
    v-model:show="liveChatInputShow"
    ref="liveChatInputRef"
    @blur="onChatInputBlur(true)"
  />
  <u-popup 
    :show="giftListShow"
    :overlayOpacity="0"
    bgColor="transparent"
    @close="() => (giftListShow = false)"
  >
    <LiveRoomGiftList/>
  </u-popup>
  <u-popup 
    :show="anchorInfoShow" 
    bgColor="transparent"
    @close="() => (anchorInfoShow = false)"
  >
    <LiveRoomAnchorInfo
      :anchorInfo="liveRoomUserInfo"
    />
  </u-popup>
  <view v-if="liveRoomShowAnimation" class="live-room-animation" :style="liveRoomLayout">
    <l-svga></l-svga>
  </view>
</template>

<script setup>
import '@/config/websocket'

import LiveRoomChatInput from './components/LiveRoomChatInput'
import LiveRoomCharRoom from './components/LiveRoomChatRoom/index.vue'
import LiveRoomCover from './components/LiveRoomCover'
import LiveRoomHeader from './components/LiveRoomHeader'
import LiveRoomFooter from './components/LiveRoomFooter'
import LiveRoomAnchorInfo from './components/LiveRoomAnchorInfo'
import LiveRoomGiftList from './components/LiveRoomGiftList'

import { getLiveRoomInfo } from '@apis/live'
import { useSystemStore } from '@stores/system'
import { computed, ref } from 'vue'
import { onLoad, onUnload } from '@dcloudio/uni-app'

import { useLiveStore } from '@/stores/live'
import { debounce } from '@utils/common'
import WebsocketClient from '@utils/websocketClient/WebsocketClient'
import { WS_RECEIVE_TYPE_FOLLOW_ERROR, WS_RECEIVE_TYPE_FOLLOW_SUCCESS, WS_SEND_METHOD_FOLLOW, WS_ROOM_SHAKE_HANDS, WS_RECEIVE_TYPE_UPDATE_COUNT, WS_RECEIVE_TYPE_CHAT_SUCCESS } from '@constants/websocket'
import { log } from '@/utils/dev'

const systemStore = useSystemStore()
const liveStore = useLiveStore()
let ws = null

const anchorInfoShow = ref(false)
const giftListShow = ref(false)
const chatRoomList = ref([])
const liveOpenIndex = ref(0)
const liveVideoLoading = ref(false)
const liveChatInputShow = ref(false)
const liveChatInputRef = ref(null)
const liveChatInputText = ref('')
const liveRoomShowAnimation = ref(false)
const liveRoomUserCount = ref(0)

const liveRoomInfo = ref({})
const liveRoomUserInfo = ref({})

// 单个直播间的布局
const liveRoomLayout = computed(() => ({
  height: systemStore.screenHeight + 'px',
  width: '750rpx',
}))

onLoad(() => {
  const liveRoom = liveStore.liveSlideList[liveOpenIndex.value]
  liveRoomInfo.value = liveRoom
  liveRoomUserInfo.value = liveRoom.userInfo
  liveRoomUserCount.value = liveRoom.userCount 

  liveStore.getGiftList()
  createWSConnection()
  getRoomInfo()
})

onUnload(() => {
  ws.close()
})

// video 播放事件
function onVideoPlay(e) {
  liveVideoLoading.value = false
}
// swpie 切换事件
function onSwiperChange(e) {
  const { current } = e.detail
  liveRoomChange(current)
}
// 直播间切换函数
const liveRoomChange = debounce((index) => {
  ws.close()
  liveVideoLoading.value = true
  liveOpenIndex.value = index
  getRoomInfo()
  createWSConnection()
}, 0)
// 点击说点什么
function onTapChat() {
  liveChatInputShow.value = true
}
// 聊天输入框失去焦点
function onChatInputBlur(isEmit) {
  liveChatInputShow.value = false
}
// 创建ws链接
function createWSConnection() {
  const liveInfo = liveStore.liveSlideList[liveOpenIndex.value]
  ws = new WebsocketClient({
    url: `ws://${liveInfo.socketAddr}:${liveInfo.socketPort}`,
  })
  ws.on('open', () => {
    ws.sendByTemplate(WS_ROOM_SHAKE_HANDS, liveInfo.id)
  })
  ws.on('message', (data) => {
    const { type, msg } = data
    log('ws message', data)
    switch (type) {
      case WS_RECEIVE_TYPE_UPDATE_COUNT: {
        liveRoomUserCount.value = data.count
        break
      }
      case WS_RECEIVE_TYPE_CHAT_SUCCESS: {
        chatRoomList.value.push({
          name: data.name,
          level: data.vipId,
          text: data.data
        })
        break
      }
      case WS_RECEIVE_TYPE_FOLLOW_SUCCESS:
      case WS_RECEIVE_TYPE_FOLLOW_ERROR: {
        console.log('关注成功');
        uni.showToast({
          title: type === WS_RECEIVE_TYPE_FOLLOW_SUCCESS ? '关注成功' : msg,
          icon: 'none'
        })
        break
      }
    }
  })
  ws.connect()
}
// 获取直播间信息
async function getRoomInfo(id) {
  const liveRoom = liveStore.liveSlideList[liveOpenIndex.value]
  const data = await getLiveRoomInfo({ roomid: id || liveRoom.id })
  if (data) {
    liveRoomInfo.value = data
    liveRoomUserInfo.value = data.userInfo
  } else {
    ws.close()
  }
}

function onTapFollow () {
  ws.sendByTemplate(WS_SEND_METHOD_FOLLOW, liveRoomInfo.value.id)
}
</script>
<style lang="scss" scoped>
.bottom-fixed {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 750rpx;
}
.live-room {
  // flex: 1;
  position: relative;

  .live-room-container {
    position: relative;
    background-color: #fff;
  }
}

.live-room-animation {
  position: fixed;
  top: 0;
  left: 0;
}
</style>
